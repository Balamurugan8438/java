1)containsDuplicate

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); 
        for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i] == nums[i+1]) {
                    return true;
                }
        }
        return false;
    }
}

2) Anagram

class Solution {
    public boolean isAnagram(String s, String t) {
      int arr[]=new int[s.length()];
      if(s.length()!=t.length()){
        return false;
      }
       int count=0;
      for(int i=0;i<s.length();i++){
        for(int j=0;j<t.length();j++){
            if(s.charAt(i)==t.charAt(j) && arr[j]==0){
                count+=1;
                arr[j]=1;
                break;
            }
        }

3) twosum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        
    }
}

4) topkfrequent

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int,int> mapping;
        vector<int> frek;
        for(int num : nums){
            mapping[num]+=1;
        }

        vector<int>answer;
        for(auto &num : mapping){
            answer.push_back(num.second);
        }
        sort(answer.begin(),answer.end(),greater<int>());
        
        for(int i = 0; i < k && i < answer.size(); ++i) {
            for(auto &num : mapping) {
                if(num.second == answer[i]) {
                    frek.push_back(num.first);
                    num.second=-1;
                    break;
                }
            } }
        return frek;
    }
};

5)productExcdeptself

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int arr[]=new int[nums.length];
        int arr2[]=new int[nums.length];

         arr[0]=1;

        for(int i=1;i<nums.length;i++){
            arr[i]=nums[i-1] * arr[i-1];
        }

         arr2[nums.length-1]=1;
        for(int i=nums.length-2;i>=0;i--){
            arr2[i]=nums[i+1] *  arr2[i+1];
        }
        for(int i=0;i<nums.length;i++){
            nums[i]=arr[i]*arr2[i];
        }

        return nums;
    }
}

6)longestconsecutive

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int count=1,set=0;
        
        for(int i=0;i<nums.size();i++){
            
            if(nums[i]+1==nums[i+1] ){
                count+=1;
            }
            else if(nums[i]==nums[i+1]){
            
            }else{
                count=1;
            }

            if(count>set){
                set=count;
            }
        } 
    
        return set;
    }
};

7)isPalindrome

class Solution {
    public boolean isPalindrome(String s) {
        String str[]=s.split(" ");
        String save="";
        for(String res : str){
            res= res.replaceAll("[^a-zA-Z0-9]", " ");  
            save+=res;
        }
        String arr[]=save.split(" ");
        save=" ";
        for(String res : arr){
            save+=res;
        }  
        save=save.trim();
            save=save.toLowerCase();
        int count=0;
       int i=0,j=save.length()-1;
       System.out.print(save+" ");
        
        
        while(i<j){
            char ch1=save.charAt(i);
            char ch2=save.charAt(j);
      
            if(ch1==ch2){
                count++;
                
            }
            else{
                break;
            }
            i++; j--;
        }
        if(count==save.length()/2)
           return true;


        return false;   
    }

8)maxSubArray

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int count=0;
        int save=INT_MIN;
      for(int i=0;i<nums.size();i++){

        count+=nums[i];
        if(count>save){
            save=count;
        }

        if(count<0){
            count=0;
        }
      }  
      return save; 
    }
};

9)twosum

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int i=0,j=numbers.length-1;
        while(i<numbers.length && j>=0){
            int a=numbers[i]+numbers[j];
             if(a==target){
                break;
             }
             else if(a>target){
                j--;
             }
             else if(a<target){
              i++;
             }

        }
        return new int[]{i+1,j+1};
    }
};

10)plus One

class Solution {
    public int[] plusOne(int[] digits) {
        ArrayList<Integer>arrlist=new ArrayList<>();
          int count=0,a=0;
        for(int i=digits.length-1;i>=0;i--){
            if(i==digits.length-1){
                a=digits[i]+1;
                if(a>9){
                    count=a/10;
                    arrlist.add(a%10);
                }
                else{
                    arrlist.add(a);
                    count=0;
                }
            }
            else{
                a=digits[i]+count;
                if(a>9){
                    count=a/10;
                    arrlist.add(a%10);
                }
                else{
                    arrlist.add(a);
                    count=0;
                }
            }
        }
        if(count!=0){
            arrlist.add(count);
        }
        int arr[]=new int[arrlist.size()];
        int j=0;
        for(int i=arr.length-1;i>=0;i--){
            arr[j]=arrlist.get(i);
            j++;
        }
        return arr;
    }
}

11)completeciruit

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int gas_count=0;
        for(int i=0;i<gas.length;i++){
            gas_count+=gas[i];
        }
        int cost_count=0;
        for(int i=0;i<cost.length;i++){
            cost_count+=cost[i];
        }
        if(gas_count<cost_count){
            return -1;
        }
        int start=0,current_count=0;
        for(int i=0;i<gas.length;i++){
              current_count+=(gas[i]-cost[i]);
              if(current_count<0){
                start=i+1;
                current_count=0;
              }
        }
        return start;
    }
}

12)isHappy

class Solution {
    public boolean isHappy(int n) {
        boolean st=true;
        int count=0;
        HashSet<Integer>hash=new HashSet<>();
        while(n!=1){
            int temp=n;
            count=0;
            while(temp!=0){
                int a=temp%10;
                count+=(a*a);
                temp=temp/10;
            }
          if(hash.contains(count)){
                return false;
            }
            hash.add(count);
            n=count;
            }
        return true;
    }
}

13)setzeroes

class Solution {
    public void setZeroes(int[][] matrix) {
        int temp[][]=new int[matrix.length][matrix[0].length];
        int m=matrix.length; int n=matrix[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                temp[i][j]=matrix[i][j];
            }
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(temp[i][j]==0){
                    for(int k=0;k<n || k<m;k++){
                        if(k<n){
                     matrix[i][k]=0;
                        }
                        if(k<m){
                            matrix[k][j]=0;
                        }
                    }
                }
            }
        }
    }
}

14)canCompleteCircuit

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int gas_count=0;
        for(int i=0;i<gas.length;i++){
            gas_count+=gas[i];
        }
        int cost_count=0;
        for(int i=0;i<cost.length;i++){
            cost_count+=cost[i];
        }
        if(gas_count<cost_count){
            return -1;
        }
        int start=0,current_count=0;
        for(int i=0;i<gas.length;i++){
              current_count+=(gas[i]-cost[i]);
              if(current_count<0){
                start=i+1;
                current_count=0;
              }
        }
        return start;
    }
}

PATTERN :
15)
import java.util.Scanner;
public class RightTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

16)

import java.util.Scanner;
public class InvertedRightTriangle {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = rows; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

17)

import java.util.Scanner;
public class Square {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();

        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= rows; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
    }
}

18)

import java.util.Scanner;
public class RightTriangleNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

19)

import java.util.Scanner;
public class InvertedRightTriangleNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = rows; i >= 1; i--) {
            for (int j = 1; j <= i; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

20)

import java.util.Scanner;
public class SquareNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
       System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= rows; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
}

21)

import java.util.Scanner;
public class Pyramid {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = i; j < rows; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

22)

import java.util.Scanner;
public class InvertedPyramid {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = rows; i >= 1; i--) {
            for (int j = rows; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

23)

import java.util.Scanner;
public class Diamond {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = i; j < rows; j++) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
        for (int i = rows - 1; i >= 1; i--) {
            for (int j = rows; j > i; j--) {
                System.out.print(" ");
            }
            for (int k = 1; k <= (2 * i - 1); k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }
}

24)

import java.util.Scanner;
public class HollowSquare {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= rows; j++) {
                if (i == 1 || i == rows || j == 1 || j == rows) {
                    System.out.print("* ");
                } else {
                    System.out.print("  ");
                }
            }
            System.out.println();
        }
    }
}

25)ARRAY REVERSE

import java.util.*;
public class Main {
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[]=new int[n+1];
		for(int i=0; i<n; i++) {
			arr[i]=sc.nextInt();
		}
		int pos=sc.nextInt();
		int value=sc.nextInt();
		for(int i=n-1; i>pos-2; i--)
		{
			arr[i+1]=arr[i];
		}
		arr[pos-1]=value;
		n=n+1;
		for(int j=0; j<n; j++)
		{
			System.out.println(arr[j]);
		}
	}
}

26)DUPLICATEE ARRAY

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	    Scanner s=new Scanner(System.in);
	    int n=s.nextInt();
	    int a[]=new int[n];
	    for(int i=0;i<n;i++)
	    a[i]=s.nextInt();
	    {
	        for(int i=0;i<n;i++)
	        {
	            for(int j=i+1;j<n;j++){
	                if(a[i]==a[j]){
	                    a[j]=a[n-1];
	                    --n;
	                    --j;
	                    
	                }
	            }
	        }
	    }
	    for(int i=0;i<n;i++)
	        {
	            System.out.println("  "+a[i]);
	        }
	}
}

27)CONTAIN DUPLICATE

class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums); 
        for (int i = 0; i < nums.length - 1; i++) {
                if (nums[i] == nums[i+1]) {
                    return true;
                }
        }
        return false;
    }
}

28)ANAGRAM ARRAY

class Solution {
    public boolean isAnagram(String s, String t) {
      int arr[]=new int[s.length()];
      if(s.length()!=t.length()){
        return false;
      }
       int count=0;
      for(int i=0;i<s.length();i++){
        for(int j=0;j<t.length();j++){
            if(s.charAt(i)==t.charAt(j) && arr[j]==0){
                count+=1;
                arr[j]=1;
                break;
            }
        }
      }
      if(count==s.length()){
    return true;
      }

      return false;
    }
}

29)SUM OF TWO ARRAY

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        
    }
}

30) EVEN OR ODD

import java.util.Scanner;

public class EvenOddCheck {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        int num = scanner.nextInt();

        if (num % 2 == 0) {
            System.out.println(num + " is even.");
        } else {
            System.out.println(num + " is odd.");
        }
    }
}
